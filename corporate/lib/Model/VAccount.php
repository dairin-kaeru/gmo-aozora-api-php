<?php
/**
 * VAccount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ganb\Corporate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GMO Aozora Net Bank Open API
 *
 * <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/business/service/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/corporation/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/corporation/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ganb\Corporate\Client\Model;

use \ArrayAccess;
use \Ganb\Corporate\Client\ObjectSerializer;
use ReturnTypeWillChange;

/**
 * VAccount Class Doc Comment
 *
 * @category Class
 * @package  Ganb\Corporate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VAccount implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'va_id' => 'string',
        'va_branch_code' => 'string',
        'va_branch_name' => 'string',
        'va_branch_name_kana' => 'string',
        'va_account_number' => 'string',
        'va_holder_name_kana' => 'string',
        'va_type_code' => 'string',
        'va_type_name' => 'string',
        'va_status_code' => 'string',
        'va_status_name' => 'string',
        'va_status_change_possible_code' => 'string',
        'va_issue_date_time' => 'string',
        'va_change_status_date_time' => 'string',
        'va_close_date_time' => 'string',
        'expire_date_time' => 'string',
        'latest_deposit_date' => 'string',
        'latest_deposit_amount' => 'string',
        'latest_deposit_count' => 'string',
        'ra_id' => 'string',
        'ra_branch_code' => 'string',
        'ra_branch_name' => 'string',
        'ra_account_number' => 'string',
        'ra_holder_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'va_id' => null,
        'va_branch_code' => null,
        'va_branch_name' => null,
        'va_branch_name_kana' => null,
        'va_account_number' => null,
        'va_holder_name_kana' => null,
        'va_type_code' => null,
        'va_type_name' => null,
        'va_status_code' => null,
        'va_status_name' => null,
        'va_status_change_possible_code' => null,
        'va_issue_date_time' => null,
        'va_change_status_date_time' => null,
        'va_close_date_time' => null,
        'expire_date_time' => null,
        'latest_deposit_date' => null,
        'latest_deposit_amount' => null,
        'latest_deposit_count' => null,
        'ra_id' => null,
        'ra_branch_code' => null,
        'ra_branch_name' => null,
        'ra_account_number' => null,
        'ra_holder_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'va_id' => 'vaId',
        'va_branch_code' => 'vaBranchCode',
        'va_branch_name' => 'vaBranchName',
        'va_branch_name_kana' => 'vaBranchNameKana',
        'va_account_number' => 'vaAccountNumber',
        'va_holder_name_kana' => 'vaHolderNameKana',
        'va_type_code' => 'vaTypeCode',
        'va_type_name' => 'vaTypeName',
        'va_status_code' => 'vaStatusCode',
        'va_status_name' => 'vaStatusName',
        'va_status_change_possible_code' => 'vaStatusChangePossibleCode',
        'va_issue_date_time' => 'vaIssueDateTime',
        'va_change_status_date_time' => 'vaChangeStatusDateTime',
        'va_close_date_time' => 'vaCloseDateTime',
        'expire_date_time' => 'expireDateTime',
        'latest_deposit_date' => 'latestDepositDate',
        'latest_deposit_amount' => 'latestDepositAmount',
        'latest_deposit_count' => 'latestDepositCount',
        'ra_id' => 'raId',
        'ra_branch_code' => 'raBranchCode',
        'ra_branch_name' => 'raBranchName',
        'ra_account_number' => 'raAccountNumber',
        'ra_holder_name' => 'raHolderName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'va_id' => 'setVaId',
        'va_branch_code' => 'setVaBranchCode',
        'va_branch_name' => 'setVaBranchName',
        'va_branch_name_kana' => 'setVaBranchNameKana',
        'va_account_number' => 'setVaAccountNumber',
        'va_holder_name_kana' => 'setVaHolderNameKana',
        'va_type_code' => 'setVaTypeCode',
        'va_type_name' => 'setVaTypeName',
        'va_status_code' => 'setVaStatusCode',
        'va_status_name' => 'setVaStatusName',
        'va_status_change_possible_code' => 'setVaStatusChangePossibleCode',
        'va_issue_date_time' => 'setVaIssueDateTime',
        'va_change_status_date_time' => 'setVaChangeStatusDateTime',
        'va_close_date_time' => 'setVaCloseDateTime',
        'expire_date_time' => 'setExpireDateTime',
        'latest_deposit_date' => 'setLatestDepositDate',
        'latest_deposit_amount' => 'setLatestDepositAmount',
        'latest_deposit_count' => 'setLatestDepositCount',
        'ra_id' => 'setRaId',
        'ra_branch_code' => 'setRaBranchCode',
        'ra_branch_name' => 'setRaBranchName',
        'ra_account_number' => 'setRaAccountNumber',
        'ra_holder_name' => 'setRaHolderName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'va_id' => 'getVaId',
        'va_branch_code' => 'getVaBranchCode',
        'va_branch_name' => 'getVaBranchName',
        'va_branch_name_kana' => 'getVaBranchNameKana',
        'va_account_number' => 'getVaAccountNumber',
        'va_holder_name_kana' => 'getVaHolderNameKana',
        'va_type_code' => 'getVaTypeCode',
        'va_type_name' => 'getVaTypeName',
        'va_status_code' => 'getVaStatusCode',
        'va_status_name' => 'getVaStatusName',
        'va_status_change_possible_code' => 'getVaStatusChangePossibleCode',
        'va_issue_date_time' => 'getVaIssueDateTime',
        'va_change_status_date_time' => 'getVaChangeStatusDateTime',
        'va_close_date_time' => 'getVaCloseDateTime',
        'expire_date_time' => 'getExpireDateTime',
        'latest_deposit_date' => 'getLatestDepositDate',
        'latest_deposit_amount' => 'getLatestDepositAmount',
        'latest_deposit_count' => 'getLatestDepositCount',
        'ra_id' => 'getRaId',
        'ra_branch_code' => 'getRaBranchCode',
        'ra_branch_name' => 'getRaBranchName',
        'ra_account_number' => 'getRaAccountNumber',
        'ra_holder_name' => 'getRaHolderName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['va_id'] = isset($data['va_id']) ? $data['va_id'] : null;
        $this->container['va_branch_code'] = isset($data['va_branch_code']) ? $data['va_branch_code'] : null;
        $this->container['va_branch_name'] = isset($data['va_branch_name']) ? $data['va_branch_name'] : null;
        $this->container['va_branch_name_kana'] = isset($data['va_branch_name_kana']) ? $data['va_branch_name_kana'] : null;
        $this->container['va_account_number'] = isset($data['va_account_number']) ? $data['va_account_number'] : null;
        $this->container['va_holder_name_kana'] = isset($data['va_holder_name_kana']) ? $data['va_holder_name_kana'] : null;
        $this->container['va_type_code'] = isset($data['va_type_code']) ? $data['va_type_code'] : null;
        $this->container['va_type_name'] = isset($data['va_type_name']) ? $data['va_type_name'] : null;
        $this->container['va_status_code'] = isset($data['va_status_code']) ? $data['va_status_code'] : null;
        $this->container['va_status_name'] = isset($data['va_status_name']) ? $data['va_status_name'] : null;
        $this->container['va_status_change_possible_code'] = isset($data['va_status_change_possible_code']) ? $data['va_status_change_possible_code'] : null;
        $this->container['va_issue_date_time'] = isset($data['va_issue_date_time']) ? $data['va_issue_date_time'] : null;
        $this->container['va_change_status_date_time'] = isset($data['va_change_status_date_time']) ? $data['va_change_status_date_time'] : null;
        $this->container['va_close_date_time'] = isset($data['va_close_date_time']) ? $data['va_close_date_time'] : null;
        $this->container['expire_date_time'] = isset($data['expire_date_time']) ? $data['expire_date_time'] : null;
        $this->container['latest_deposit_date'] = isset($data['latest_deposit_date']) ? $data['latest_deposit_date'] : null;
        $this->container['latest_deposit_amount'] = isset($data['latest_deposit_amount']) ? $data['latest_deposit_amount'] : null;
        $this->container['latest_deposit_count'] = isset($data['latest_deposit_count']) ? $data['latest_deposit_count'] : null;
        $this->container['ra_id'] = isset($data['ra_id']) ? $data['ra_id'] : null;
        $this->container['ra_branch_code'] = isset($data['ra_branch_code']) ? $data['ra_branch_code'] : null;
        $this->container['ra_branch_name'] = isset($data['ra_branch_name']) ? $data['ra_branch_name'] : null;
        $this->container['ra_account_number'] = isset($data['ra_account_number']) ? $data['ra_account_number'] : null;
        $this->container['ra_holder_name'] = isset($data['ra_holder_name']) ? $data['ra_holder_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['va_id'] === null) {
            $invalidProperties[] = "'va_id' can't be null";
        }
        if ((mb_strlen($this->container['va_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'va_id', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['va_id']) < 10)) {
            $invalidProperties[] = "invalid value for 'va_id', the character length must be bigger than or equal to 10.";
        }

        if ($this->container['va_branch_code'] === null) {
            $invalidProperties[] = "'va_branch_code' can't be null";
        }
        if ((mb_strlen($this->container['va_branch_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'va_branch_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['va_branch_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'va_branch_code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['va_branch_name'] === null) {
            $invalidProperties[] = "'va_branch_name' can't be null";
        }
        if ((mb_strlen($this->container['va_branch_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'va_branch_name', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['va_branch_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_branch_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['va_branch_name_kana'] === null) {
            $invalidProperties[] = "'va_branch_name_kana' can't be null";
        }
        if ((mb_strlen($this->container['va_branch_name_kana']) > 15)) {
            $invalidProperties[] = "invalid value for 'va_branch_name_kana', the character length must be smaller than or equal to 15.";
        }

        if ((mb_strlen($this->container['va_branch_name_kana']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_branch_name_kana', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['va_account_number'] === null) {
            $invalidProperties[] = "'va_account_number' can't be null";
        }
        if ((mb_strlen($this->container['va_account_number']) > 7)) {
            $invalidProperties[] = "invalid value for 'va_account_number', the character length must be smaller than or equal to 7.";
        }

        if ((mb_strlen($this->container['va_account_number']) < 7)) {
            $invalidProperties[] = "invalid value for 'va_account_number', the character length must be bigger than or equal to 7.";
        }

        if ($this->container['va_holder_name_kana'] === null) {
            $invalidProperties[] = "'va_holder_name_kana' can't be null";
        }
        if ((mb_strlen($this->container['va_holder_name_kana']) > 40)) {
            $invalidProperties[] = "invalid value for 'va_holder_name_kana', the character length must be smaller than or equal to 40.";
        }

        if ((mb_strlen($this->container['va_holder_name_kana']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_holder_name_kana', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['va_type_code'] === null) {
            $invalidProperties[] = "'va_type_code' can't be null";
        }
        if ((mb_strlen($this->container['va_type_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'va_type_code', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['va_type_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_type_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['va_type_name'] === null) {
            $invalidProperties[] = "'va_type_name' can't be null";
        }
        if ((mb_strlen($this->container['va_type_name']) > 10)) {
            $invalidProperties[] = "invalid value for 'va_type_name', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['va_type_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_type_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['va_status_code'] === null) {
            $invalidProperties[] = "'va_status_code' can't be null";
        }
        if ((mb_strlen($this->container['va_status_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'va_status_code', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['va_status_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_status_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['va_status_name'] === null) {
            $invalidProperties[] = "'va_status_name' can't be null";
        }
        if ((mb_strlen($this->container['va_status_name']) > 4)) {
            $invalidProperties[] = "invalid value for 'va_status_name', the character length must be smaller than or equal to 4.";
        }

        if ((mb_strlen($this->container['va_status_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_status_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['va_status_change_possible_code'] === null) {
            $invalidProperties[] = "'va_status_change_possible_code' can't be null";
        }
        if ((mb_strlen($this->container['va_status_change_possible_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'va_status_change_possible_code', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['va_status_change_possible_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_status_change_possible_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['va_issue_date_time'] === null) {
            $invalidProperties[] = "'va_issue_date_time' can't be null";
        }
        if ((mb_strlen($this->container['va_issue_date_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'va_issue_date_time', the character length must be smaller than or equal to 25.";
        }

        if ((mb_strlen($this->container['va_issue_date_time']) < 25)) {
            $invalidProperties[] = "invalid value for 'va_issue_date_time', the character length must be bigger than or equal to 25.";
        }

        if (!is_null($this->container['va_change_status_date_time']) && (mb_strlen($this->container['va_change_status_date_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'va_change_status_date_time', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['va_change_status_date_time']) && (mb_strlen($this->container['va_change_status_date_time']) < 25)) {
            $invalidProperties[] = "invalid value for 'va_change_status_date_time', the character length must be bigger than or equal to 25.";
        }

        if (!is_null($this->container['va_close_date_time']) && (mb_strlen($this->container['va_close_date_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'va_close_date_time', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['va_close_date_time']) && (mb_strlen($this->container['va_close_date_time']) < 25)) {
            $invalidProperties[] = "invalid value for 'va_close_date_time', the character length must be bigger than or equal to 25.";
        }

        if (!is_null($this->container['expire_date_time']) && (mb_strlen($this->container['expire_date_time']) > 25)) {
            $invalidProperties[] = "invalid value for 'expire_date_time', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['expire_date_time']) && (mb_strlen($this->container['expire_date_time']) < 25)) {
            $invalidProperties[] = "invalid value for 'expire_date_time', the character length must be bigger than or equal to 25.";
        }

        if (!is_null($this->container['latest_deposit_date']) && (mb_strlen($this->container['latest_deposit_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_date', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['latest_deposit_date']) && (mb_strlen($this->container['latest_deposit_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_date', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['latest_deposit_amount']) && (mb_strlen($this->container['latest_deposit_amount']) > 20)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_amount', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['latest_deposit_amount']) && (mb_strlen($this->container['latest_deposit_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['latest_deposit_count']) && (mb_strlen($this->container['latest_deposit_count']) > 10)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_count', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['latest_deposit_count']) && (mb_strlen($this->container['latest_deposit_count']) < 1)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_count', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ra_id'] === null) {
            $invalidProperties[] = "'ra_id' can't be null";
        }
        if ((mb_strlen($this->container['ra_id']) > 29)) {
            $invalidProperties[] = "invalid value for 'ra_id', the character length must be smaller than or equal to 29.";
        }

        if ((mb_strlen($this->container['ra_id']) < 12)) {
            $invalidProperties[] = "invalid value for 'ra_id', the character length must be bigger than or equal to 12.";
        }

        if ($this->container['ra_branch_code'] === null) {
            $invalidProperties[] = "'ra_branch_code' can't be null";
        }
        if ((mb_strlen($this->container['ra_branch_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'ra_branch_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['ra_branch_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'ra_branch_code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['ra_branch_name'] === null) {
            $invalidProperties[] = "'ra_branch_name' can't be null";
        }
        if ((mb_strlen($this->container['ra_branch_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'ra_branch_name', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['ra_branch_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'ra_branch_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ra_account_number'] === null) {
            $invalidProperties[] = "'ra_account_number' can't be null";
        }
        if ((mb_strlen($this->container['ra_account_number']) > 7)) {
            $invalidProperties[] = "invalid value for 'ra_account_number', the character length must be smaller than or equal to 7.";
        }

        if ((mb_strlen($this->container['ra_account_number']) < 7)) {
            $invalidProperties[] = "invalid value for 'ra_account_number', the character length must be bigger than or equal to 7.";
        }

        if ($this->container['ra_holder_name'] === null) {
            $invalidProperties[] = "'ra_holder_name' can't be null";
        }
        if ((mb_strlen($this->container['ra_holder_name']) > 48)) {
            $invalidProperties[] = "invalid value for 'ra_holder_name', the character length must be smaller than or equal to 48.";
        }

        if ((mb_strlen($this->container['ra_holder_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'ra_holder_name', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets va_id
     *
     * @return string
     */
    public function getVaId()
    {
        return $this->container['va_id'];
    }

    /**
     * Sets va_id
     *
     * @param string $va_id 振込入金口座ID 半角数字 振込入金口座を識別するID
     *
     * @return $this
     */
    public function setVaId($va_id)
    {
        if ((mb_strlen($va_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $va_id when calling VAccount., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($va_id) < 10)) {
            throw new \InvalidArgumentException('invalid length for $va_id when calling VAccount., must be bigger than or equal to 10.');
        }

        $this->container['va_id'] = $va_id;

        return $this;
    }

    /**
     * Gets va_branch_code
     *
     * @return string
     */
    public function getVaBranchCode()
    {
        return $this->container['va_branch_code'];
    }

    /**
     * Sets va_branch_code
     *
     * @param string $va_branch_code 支店コード 半角数字
     *
     * @return $this
     */
    public function setVaBranchCode($va_branch_code)
    {
        if ((mb_strlen($va_branch_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $va_branch_code when calling VAccount., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($va_branch_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $va_branch_code when calling VAccount., must be bigger than or equal to 3.');
        }

        $this->container['va_branch_code'] = $va_branch_code;

        return $this;
    }

    /**
     * Gets va_branch_name
     *
     * @return string
     */
    public function getVaBranchName()
    {
        return $this->container['va_branch_name'];
    }

    /**
     * Sets va_branch_name
     *
     * @param string $va_branch_name 支店名 全角文字
     *
     * @return $this
     */
    public function setVaBranchName($va_branch_name)
    {
        if ((mb_strlen($va_branch_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $va_branch_name when calling VAccount., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($va_branch_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_branch_name when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['va_branch_name'] = $va_branch_name;

        return $this;
    }

    /**
     * Gets va_branch_name_kana
     *
     * @return string
     */
    public function getVaBranchNameKana()
    {
        return $this->container['va_branch_name_kana'];
    }

    /**
     * Sets va_branch_name_kana
     *
     * @param string $va_branch_name_kana 支店名カナ 半角文字
     *
     * @return $this
     */
    public function setVaBranchNameKana($va_branch_name_kana)
    {
        if ((mb_strlen($va_branch_name_kana) > 15)) {
            throw new \InvalidArgumentException('invalid length for $va_branch_name_kana when calling VAccount., must be smaller than or equal to 15.');
        }
        if ((mb_strlen($va_branch_name_kana) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_branch_name_kana when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['va_branch_name_kana'] = $va_branch_name_kana;

        return $this;
    }

    /**
     * Gets va_account_number
     *
     * @return string
     */
    public function getVaAccountNumber()
    {
        return $this->container['va_account_number'];
    }

    /**
     * Sets va_account_number
     *
     * @param string $va_account_number 口座番号 半角数字
     *
     * @return $this
     */
    public function setVaAccountNumber($va_account_number)
    {
        if ((mb_strlen($va_account_number) > 7)) {
            throw new \InvalidArgumentException('invalid length for $va_account_number when calling VAccount., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($va_account_number) < 7)) {
            throw new \InvalidArgumentException('invalid length for $va_account_number when calling VAccount., must be bigger than or equal to 7.');
        }

        $this->container['va_account_number'] = $va_account_number;

        return $this;
    }

    /**
     * Gets va_holder_name_kana
     *
     * @return string
     */
    public function getVaHolderNameKana()
    {
        return $this->container['va_holder_name_kana'];
    }

    /**
     * Sets va_holder_name_kana
     *
     * @param string $va_holder_name_kana 口座名義カナ 半角文字
     *
     * @return $this
     */
    public function setVaHolderNameKana($va_holder_name_kana)
    {
        if ((mb_strlen($va_holder_name_kana) > 40)) {
            throw new \InvalidArgumentException('invalid length for $va_holder_name_kana when calling VAccount., must be smaller than or equal to 40.');
        }
        if ((mb_strlen($va_holder_name_kana) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_holder_name_kana when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['va_holder_name_kana'] = $va_holder_name_kana;

        return $this;
    }

    /**
     * Gets va_type_code
     *
     * @return string
     */
    public function getVaTypeCode()
    {
        return $this->container['va_type_code'];
    }

    /**
     * Sets va_type_code
     *
     * @param string $va_type_code 振込入金口座　種類コード 半角数字 ・1=期限型 ・2=継続型
     *
     * @return $this
     */
    public function setVaTypeCode($va_type_code)
    {
        if ((mb_strlen($va_type_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $va_type_code when calling VAccount., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($va_type_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_type_code when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['va_type_code'] = $va_type_code;

        return $this;
    }

    /**
     * Gets va_type_name
     *
     * @return string
     */
    public function getVaTypeName()
    {
        return $this->container['va_type_name'];
    }

    /**
     * Sets va_type_name
     *
     * @param string $va_type_name 振込入金口座　種類名 全角文字 振込入金口座　種類コードの名称
     *
     * @return $this
     */
    public function setVaTypeName($va_type_name)
    {
        if ((mb_strlen($va_type_name) > 10)) {
            throw new \InvalidArgumentException('invalid length for $va_type_name when calling VAccount., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($va_type_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_type_name when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['va_type_name'] = $va_type_name;

        return $this;
    }

    /**
     * Gets va_status_code
     *
     * @return string
     */
    public function getVaStatusCode()
    {
        return $this->container['va_status_code'];
    }

    /**
     * Sets va_status_code
     *
     * @param string $va_status_code 振込入金口座　状態コード 半角数字 ・1=利用可能 ・2=停止中 ・3=削除済
     *
     * @return $this
     */
    public function setVaStatusCode($va_status_code)
    {
        if ((mb_strlen($va_status_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $va_status_code when calling VAccount., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($va_status_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_status_code when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['va_status_code'] = $va_status_code;

        return $this;
    }

    /**
     * Gets va_status_name
     *
     * @return string
     */
    public function getVaStatusName()
    {
        return $this->container['va_status_name'];
    }

    /**
     * Sets va_status_name
     *
     * @param string $va_status_name 振込入金口座　状態名 全角文字 振込入金口座　状態コードの名称
     *
     * @return $this
     */
    public function setVaStatusName($va_status_name)
    {
        if ((mb_strlen($va_status_name) > 4)) {
            throw new \InvalidArgumentException('invalid length for $va_status_name when calling VAccount., must be smaller than or equal to 4.');
        }
        if ((mb_strlen($va_status_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_status_name when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['va_status_name'] = $va_status_name;

        return $this;
    }

    /**
     * Gets va_status_change_possible_code
     *
     * @return string
     */
    public function getVaStatusChangePossibleCode()
    {
        return $this->container['va_status_change_possible_code'];
    }

    /**
     * Sets va_status_change_possible_code
     *
     * @param string $va_status_change_possible_code 振込入金口座　状態変更可能コード 半角数字 現在の口座状態から変更可能な口座状態を表したコード値 ・1=停止・削除 ・2=再開・削除 ・3=該当なし
     *
     * @return $this
     */
    public function setVaStatusChangePossibleCode($va_status_change_possible_code)
    {
        if ((mb_strlen($va_status_change_possible_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $va_status_change_possible_code when calling VAccount., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($va_status_change_possible_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_status_change_possible_code when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['va_status_change_possible_code'] = $va_status_change_possible_code;

        return $this;
    }

    /**
     * Gets va_issue_date_time
     *
     * @return string
     */
    public function getVaIssueDateTime()
    {
        return $this->container['va_issue_date_time'];
    }

    /**
     * Sets va_issue_date_time
     *
     * @param string $va_issue_date_time 発行日時 半角文字 YYYY-MM-DDTHH:MM:SS+09:00形式
     *
     * @return $this
     */
    public function setVaIssueDateTime($va_issue_date_time)
    {
        if ((mb_strlen($va_issue_date_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $va_issue_date_time when calling VAccount., must be smaller than or equal to 25.');
        }
        if ((mb_strlen($va_issue_date_time) < 25)) {
            throw new \InvalidArgumentException('invalid length for $va_issue_date_time when calling VAccount., must be bigger than or equal to 25.');
        }

        $this->container['va_issue_date_time'] = $va_issue_date_time;

        return $this;
    }

    /**
     * Gets va_change_status_date_time
     *
     * @return string
     */
    public function getVaChangeStatusDateTime()
    {
        return $this->container['va_change_status_date_time'];
    }

    /**
     * Sets va_change_status_date_time
     *
     * @param string $va_change_status_date_time 状態変更日時 半角文字 YYYY-MM-DDTHH:MM:SS+09:00形式 状態が変更されている場合のみ設定されます 該当しない場合は項目自体を設定しません
     *
     * @return $this
     */
    public function setVaChangeStatusDateTime($va_change_status_date_time)
    {
        if (!is_null($va_change_status_date_time) && (mb_strlen($va_change_status_date_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $va_change_status_date_time when calling VAccount., must be smaller than or equal to 25.');
        }
        if (!is_null($va_change_status_date_time) && (mb_strlen($va_change_status_date_time) < 25)) {
            throw new \InvalidArgumentException('invalid length for $va_change_status_date_time when calling VAccount., must be bigger than or equal to 25.');
        }

        $this->container['va_change_status_date_time'] = $va_change_status_date_time;

        return $this;
    }

    /**
     * Gets va_close_date_time
     *
     * @return string
     */
    public function getVaCloseDateTime()
    {
        return $this->container['va_close_date_time'];
    }

    /**
     * Sets va_close_date_time
     *
     * @param string $va_close_date_time 削除日時 半角文字 YYYY-MM-DDTHH:MM:SS+09:00形式 状態コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・3=削除済
     *
     * @return $this
     */
    public function setVaCloseDateTime($va_close_date_time)
    {
        if (!is_null($va_close_date_time) && (mb_strlen($va_close_date_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $va_close_date_time when calling VAccount., must be smaller than or equal to 25.');
        }
        if (!is_null($va_close_date_time) && (mb_strlen($va_close_date_time) < 25)) {
            throw new \InvalidArgumentException('invalid length for $va_close_date_time when calling VAccount., must be bigger than or equal to 25.');
        }

        $this->container['va_close_date_time'] = $va_close_date_time;

        return $this;
    }

    /**
     * Gets expire_date_time
     *
     * @return string
     */
    public function getExpireDateTime()
    {
        return $this->container['expire_date_time'];
    }

    /**
     * Sets expire_date_time
     *
     * @param string $expire_date_time 有効期限日時 半角文字 YYYY-MM-DDTHH:MM:SS+09:00形式 種類コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・2=期限型
     *
     * @return $this
     */
    public function setExpireDateTime($expire_date_time)
    {
        if (!is_null($expire_date_time) && (mb_strlen($expire_date_time) > 25)) {
            throw new \InvalidArgumentException('invalid length for $expire_date_time when calling VAccount., must be smaller than or equal to 25.');
        }
        if (!is_null($expire_date_time) && (mb_strlen($expire_date_time) < 25)) {
            throw new \InvalidArgumentException('invalid length for $expire_date_time when calling VAccount., must be bigger than or equal to 25.');
        }

        $this->container['expire_date_time'] = $expire_date_time;

        return $this;
    }

    /**
     * Gets latest_deposit_date
     *
     * @return string
     */
    public function getLatestDepositDate()
    {
        return $this->container['latest_deposit_date'];
    }

    /**
     * Sets latest_deposit_date
     *
     * @param string $latest_deposit_date 最終入金日 半角文字 YYYY-MM-DD形式 入金がない場合は項目自体を設定しません
     *
     * @return $this
     */
    public function setLatestDepositDate($latest_deposit_date)
    {
        if (!is_null($latest_deposit_date) && (mb_strlen($latest_deposit_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_date when calling VAccount., must be smaller than or equal to 10.');
        }
        if (!is_null($latest_deposit_date) && (mb_strlen($latest_deposit_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_date when calling VAccount., must be bigger than or equal to 10.');
        }

        $this->container['latest_deposit_date'] = $latest_deposit_date;

        return $this;
    }

    /**
     * Gets latest_deposit_amount
     *
     * @return string
     */
    public function getLatestDepositAmount()
    {
        return $this->container['latest_deposit_amount'];
    }

    /**
     * Sets latest_deposit_amount
     *
     * @param string $latest_deposit_amount 最終入金金額 半角数字 入金がない場合は項目自体を設定しません
     *
     * @return $this
     */
    public function setLatestDepositAmount($latest_deposit_amount)
    {
        if (!is_null($latest_deposit_amount) && (mb_strlen($latest_deposit_amount) > 20)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_amount when calling VAccount., must be smaller than or equal to 20.');
        }
        if (!is_null($latest_deposit_amount) && (mb_strlen($latest_deposit_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_amount when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['latest_deposit_amount'] = $latest_deposit_amount;

        return $this;
    }

    /**
     * Gets latest_deposit_count
     *
     * @return string
     */
    public function getLatestDepositCount()
    {
        return $this->container['latest_deposit_count'];
    }

    /**
     * Sets latest_deposit_count
     *
     * @param string $latest_deposit_count 最終入金日入金回数 半角数字 入金がない場合は項目自体を設定しません
     *
     * @return $this
     */
    public function setLatestDepositCount($latest_deposit_count)
    {
        if (!is_null($latest_deposit_count) && (mb_strlen($latest_deposit_count) > 10)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_count when calling VAccount., must be smaller than or equal to 10.');
        }
        if (!is_null($latest_deposit_count) && (mb_strlen($latest_deposit_count) < 1)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_count when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['latest_deposit_count'] = $latest_deposit_count;

        return $this;
    }

    /**
     * Gets ra_id
     *
     * @return string
     */
    public function getRaId()
    {
        return $this->container['ra_id'];
    }

    /**
     * Sets ra_id
     *
     * @param string $ra_id 入金口座ID 半角数字 入金先の口座を識別するID
     *
     * @return $this
     */
    public function setRaId($ra_id)
    {
        if ((mb_strlen($ra_id) > 29)) {
            throw new \InvalidArgumentException('invalid length for $ra_id when calling VAccount., must be smaller than or equal to 29.');
        }
        if ((mb_strlen($ra_id) < 12)) {
            throw new \InvalidArgumentException('invalid length for $ra_id when calling VAccount., must be bigger than or equal to 12.');
        }

        $this->container['ra_id'] = $ra_id;

        return $this;
    }

    /**
     * Gets ra_branch_code
     *
     * @return string
     */
    public function getRaBranchCode()
    {
        return $this->container['ra_branch_code'];
    }

    /**
     * Sets ra_branch_code
     *
     * @param string $ra_branch_code 入金口座　支店コード 半角数字
     *
     * @return $this
     */
    public function setRaBranchCode($ra_branch_code)
    {
        if ((mb_strlen($ra_branch_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $ra_branch_code when calling VAccount., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($ra_branch_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $ra_branch_code when calling VAccount., must be bigger than or equal to 3.');
        }

        $this->container['ra_branch_code'] = $ra_branch_code;

        return $this;
    }

    /**
     * Gets ra_branch_name
     *
     * @return string
     */
    public function getRaBranchName()
    {
        return $this->container['ra_branch_name'];
    }

    /**
     * Sets ra_branch_name
     *
     * @param string $ra_branch_name 入金口座　支店名 全角文字
     *
     * @return $this
     */
    public function setRaBranchName($ra_branch_name)
    {
        if ((mb_strlen($ra_branch_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $ra_branch_name when calling VAccount., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($ra_branch_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ra_branch_name when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['ra_branch_name'] = $ra_branch_name;

        return $this;
    }

    /**
     * Gets ra_account_number
     *
     * @return string
     */
    public function getRaAccountNumber()
    {
        return $this->container['ra_account_number'];
    }

    /**
     * Sets ra_account_number
     *
     * @param string $ra_account_number 入金口座　口座番号 半角数字
     *
     * @return $this
     */
    public function setRaAccountNumber($ra_account_number)
    {
        if ((mb_strlen($ra_account_number) > 7)) {
            throw new \InvalidArgumentException('invalid length for $ra_account_number when calling VAccount., must be smaller than or equal to 7.');
        }
        if ((mb_strlen($ra_account_number) < 7)) {
            throw new \InvalidArgumentException('invalid length for $ra_account_number when calling VAccount., must be bigger than or equal to 7.');
        }

        $this->container['ra_account_number'] = $ra_account_number;

        return $this;
    }

    /**
     * Gets ra_holder_name
     *
     * @return string
     */
    public function getRaHolderName()
    {
        return $this->container['ra_holder_name'];
    }

    /**
     * Sets ra_holder_name
     *
     * @param string $ra_holder_name 入金口座名義 全角文字
     *
     * @return $this
     */
    public function setRaHolderName($ra_holder_name)
    {
        if ((mb_strlen($ra_holder_name) > 48)) {
            throw new \InvalidArgumentException('invalid length for $ra_holder_name when calling VAccount., must be smaller than or equal to 48.');
        }
        if ((mb_strlen($ra_holder_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ra_holder_name when calling VAccount., must be bigger than or equal to 1.');
        }

        $this->container['ra_holder_name'] = $ra_holder_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


