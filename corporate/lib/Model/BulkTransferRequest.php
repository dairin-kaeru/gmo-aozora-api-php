<?php
/**
 * BulkTransferRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ganb\Corporate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GMO Aozora Net Bank Open API
 *
 * <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/business/service/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/corporation/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/corporation/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ganb\Corporate\Client\Model;

use \ArrayAccess;
use \Ganb\Corporate\Client\ObjectSerializer;
use ReturnTypeWillChange;

/**
 * BulkTransferRequest Class Doc Comment
 *
 * @category Class
 * @package  Ganb\Corporate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BulkTransferRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BulkTransferRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'remitter_name' => 'string',
        'transfer_designated_date' => 'string',
        'transfer_date_holiday_code' => 'string',
        'transfer_data_name' => 'string',
        'total_count' => 'string',
        'total_amount' => 'string',
        'apply_comment' => 'string',
        'bulk_transfers' => '\Ganb\Corporate\Client\Model\BulkTransfer[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'remitter_name' => null,
        'transfer_designated_date' => null,
        'transfer_date_holiday_code' => null,
        'transfer_data_name' => null,
        'total_count' => null,
        'total_amount' => null,
        'apply_comment' => null,
        'bulk_transfers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'remitter_name' => 'remitterName',
        'transfer_designated_date' => 'transferDesignatedDate',
        'transfer_date_holiday_code' => 'transferDateHolidayCode',
        'transfer_data_name' => 'transferDataName',
        'total_count' => 'totalCount',
        'total_amount' => 'totalAmount',
        'apply_comment' => 'applyComment',
        'bulk_transfers' => 'bulkTransfers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'remitter_name' => 'setRemitterName',
        'transfer_designated_date' => 'setTransferDesignatedDate',
        'transfer_date_holiday_code' => 'setTransferDateHolidayCode',
        'transfer_data_name' => 'setTransferDataName',
        'total_count' => 'setTotalCount',
        'total_amount' => 'setTotalAmount',
        'apply_comment' => 'setApplyComment',
        'bulk_transfers' => 'setBulkTransfers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'remitter_name' => 'getRemitterName',
        'transfer_designated_date' => 'getTransferDesignatedDate',
        'transfer_date_holiday_code' => 'getTransferDateHolidayCode',
        'transfer_data_name' => 'getTransferDataName',
        'total_count' => 'getTotalCount',
        'total_amount' => 'getTotalAmount',
        'apply_comment' => 'getApplyComment',
        'bulk_transfers' => 'getBulkTransfers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['remitter_name'] = isset($data['remitter_name']) ? $data['remitter_name'] : null;
        $this->container['transfer_designated_date'] = isset($data['transfer_designated_date']) ? $data['transfer_designated_date'] : null;
        $this->container['transfer_date_holiday_code'] = isset($data['transfer_date_holiday_code']) ? $data['transfer_date_holiday_code'] : null;
        $this->container['transfer_data_name'] = isset($data['transfer_data_name']) ? $data['transfer_data_name'] : null;
        $this->container['total_count'] = isset($data['total_count']) ? $data['total_count'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['apply_comment'] = isset($data['apply_comment']) ? $data['apply_comment'] : null;
        $this->container['bulk_transfers'] = isset($data['bulk_transfers']) ? $data['bulk_transfers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ((mb_strlen($this->container['account_id']) > 29)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be smaller than or equal to 29.";
        }

        if ((mb_strlen($this->container['account_id']) < 12)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be bigger than or equal to 12.";
        }

        if (!is_null($this->container['remitter_name']) && (mb_strlen($this->container['remitter_name']) > 48)) {
            $invalidProperties[] = "invalid value for 'remitter_name', the character length must be smaller than or equal to 48.";
        }

        if (!is_null($this->container['remitter_name']) && (mb_strlen($this->container['remitter_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'remitter_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['transfer_designated_date'] === null) {
            $invalidProperties[] = "'transfer_designated_date' can't be null";
        }
        if ((mb_strlen($this->container['transfer_designated_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'transfer_designated_date', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['transfer_designated_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'transfer_designated_date', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['transfer_date_holiday_code']) && (mb_strlen($this->container['transfer_date_holiday_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'transfer_date_holiday_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['transfer_date_holiday_code']) && (mb_strlen($this->container['transfer_date_holiday_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'transfer_date_holiday_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transfer_data_name']) && (mb_strlen($this->container['transfer_data_name']) > 10)) {
            $invalidProperties[] = "invalid value for 'transfer_data_name', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['transfer_data_name']) && (mb_strlen($this->container['transfer_data_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'transfer_data_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['total_count'] === null) {
            $invalidProperties[] = "'total_count' can't be null";
        }
        if ((mb_strlen($this->container['total_count']) > 6)) {
            $invalidProperties[] = "invalid value for 'total_count', the character length must be smaller than or equal to 6.";
        }

        if ((mb_strlen($this->container['total_count']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_count', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['total_amount'] === null) {
            $invalidProperties[] = "'total_amount' can't be null";
        }
        if ((mb_strlen($this->container['total_amount']) > 20)) {
            $invalidProperties[] = "invalid value for 'total_amount', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['total_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['apply_comment']) && (mb_strlen($this->container['apply_comment']) > 20)) {
            $invalidProperties[] = "invalid value for 'apply_comment', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['apply_comment']) && (mb_strlen($this->container['apply_comment']) < 1)) {
            $invalidProperties[] = "invalid value for 'apply_comment', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['bulk_transfers'] === null) {
            $invalidProperties[] = "'bulk_transfers' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id 口座ID 半角英数字 口座を識別するID
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        if ((mb_strlen($account_id) > 29)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling BulkTransferRequest., must be smaller than or equal to 29.');
        }
        if ((mb_strlen($account_id) < 12)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling BulkTransferRequest., must be bigger than or equal to 12.');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets remitter_name
     *
     * @return string
     */
    public function getRemitterName()
    {
        return $this->container['remitter_name'];
    }

    /**
     * Sets remitter_name
     *
     * @param string $remitter_name 振込依頼人名 半角文字 指定しない場合は口座名義がデフォルト値となります 振込許容文字を指定可 ただし、一部の非許容文字は、許容文字に変換を行います 40文字目まで有効（41文字目以降は切り捨てます）
     *
     * @return $this
     */
    public function setRemitterName($remitter_name)
    {
        if (!is_null($remitter_name) && (mb_strlen($remitter_name) > 48)) {
            throw new \InvalidArgumentException('invalid length for $remitter_name when calling BulkTransferRequest., must be smaller than or equal to 48.');
        }
        if (!is_null($remitter_name) && (mb_strlen($remitter_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $remitter_name when calling BulkTransferRequest., must be bigger than or equal to 1.');
        }

        $this->container['remitter_name'] = $remitter_name;

        return $this;
    }

    /**
     * Gets transfer_designated_date
     *
     * @return string
     */
    public function getTransferDesignatedDate()
    {
        return $this->container['transfer_designated_date'];
    }

    /**
     * Sets transfer_designated_date
     *
     * @param string $transfer_designated_date 振込指定日 半角文字 YYYY-MM-DD形式 振込対象の指定日 ただし、振込指定日が非営業日で、非営業日に実施できない振込（他行宛振込み）が振込情報に1件以上存在する場合、以下のとおりとなります ・「振込指定日休日コード」が1または省略の場合、振込指定日の翌営業日を振込対象の指定日となります ・「振込指定日休日コード」が2の場合、振込指定日の前営業日を振込対象の指定日となります ・「振込指定日休日コード」が3の場合、エラーとなり「400 Bad Request」を返却します
     *
     * @return $this
     */
    public function setTransferDesignatedDate($transfer_designated_date)
    {
        if ((mb_strlen($transfer_designated_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $transfer_designated_date when calling BulkTransferRequest., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($transfer_designated_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $transfer_designated_date when calling BulkTransferRequest., must be bigger than or equal to 10.');
        }

        $this->container['transfer_designated_date'] = $transfer_designated_date;

        return $this;
    }

    /**
     * Gets transfer_date_holiday_code
     *
     * @return string
     */
    public function getTransferDateHolidayCode()
    {
        return $this->container['transfer_date_holiday_code'];
    }

    /**
     * Sets transfer_date_holiday_code
     *
     * @param string $transfer_date_holiday_code 振込指定日休日コード 半角数字 1：翌営業日、2：前営業日、3：エラー返却 省略可（省略した場合は1とみなします）
     *
     * @return $this
     */
    public function setTransferDateHolidayCode($transfer_date_holiday_code)
    {
        if (!is_null($transfer_date_holiday_code) && (mb_strlen($transfer_date_holiday_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $transfer_date_holiday_code when calling BulkTransferRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($transfer_date_holiday_code) && (mb_strlen($transfer_date_holiday_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transfer_date_holiday_code when calling BulkTransferRequest., must be bigger than or equal to 1.');
        }

        $this->container['transfer_date_holiday_code'] = $transfer_date_holiday_code;

        return $this;
    }

    /**
     * Gets transfer_data_name
     *
     * @return string
     */
    public function getTransferDataName()
    {
        return $this->container['transfer_data_name'];
    }

    /**
     * Sets transfer_data_name
     *
     * @param string $transfer_data_name 振込データ名 全半角文字 作成した総合振込のデータを区別するためのメモ
     *
     * @return $this
     */
    public function setTransferDataName($transfer_data_name)
    {
        if (!is_null($transfer_data_name) && (mb_strlen($transfer_data_name) > 10)) {
            throw new \InvalidArgumentException('invalid length for $transfer_data_name when calling BulkTransferRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($transfer_data_name) && (mb_strlen($transfer_data_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transfer_data_name when calling BulkTransferRequest., must be bigger than or equal to 1.');
        }

        $this->container['transfer_data_name'] = $transfer_data_name;

        return $this;
    }

    /**
     * Gets total_count
     *
     * @return string
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param string $total_count 合計件数 半角数字 1以上9,999件まで指定可能（0はエラー）
     *
     * @return $this
     */
    public function setTotalCount($total_count)
    {
        if ((mb_strlen($total_count) > 6)) {
            throw new \InvalidArgumentException('invalid length for $total_count when calling BulkTransferRequest., must be smaller than or equal to 6.');
        }
        if ((mb_strlen($total_count) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_count when calling BulkTransferRequest., must be bigger than or equal to 1.');
        }

        $this->container['total_count'] = $total_count;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return string
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param string $total_amount 合計金額 半角数字 1以上999,999,999,999円以下　数値のみで0、カンマ、マイナス不可
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        if ((mb_strlen($total_amount) > 20)) {
            throw new \InvalidArgumentException('invalid length for $total_amount when calling BulkTransferRequest., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($total_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_amount when calling BulkTransferRequest., must be bigger than or equal to 1.');
        }

        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets apply_comment
     *
     * @return string
     */
    public function getApplyComment()
    {
        return $this->container['apply_comment'];
    }

    /**
     * Sets apply_comment
     *
     * @param string $apply_comment 振込申請メモ（申請コメント） 全半角文字 ビジネスID管理申し込みかつ、申請になるユーザーの場合のみ有効 それ以外は値を設定しても銀行で読み捨て 該当する情報が無い場合は省略可（項目自体の設定が不要です）
     *
     * @return $this
     */
    public function setApplyComment($apply_comment)
    {
        if (!is_null($apply_comment) && (mb_strlen($apply_comment) > 20)) {
            throw new \InvalidArgumentException('invalid length for $apply_comment when calling BulkTransferRequest., must be smaller than or equal to 20.');
        }
        if (!is_null($apply_comment) && (mb_strlen($apply_comment) < 1)) {
            throw new \InvalidArgumentException('invalid length for $apply_comment when calling BulkTransferRequest., must be bigger than or equal to 1.');
        }

        $this->container['apply_comment'] = $apply_comment;

        return $this;
    }

    /**
     * Gets bulk_transfers
     *
     * @return \Ganb\Corporate\Client\Model\BulkTransfer[]
     */
    public function getBulkTransfers()
    {
        return $this->container['bulk_transfers'];
    }

    /**
     * Sets bulk_transfers
     *
     * @param \Ganb\Corporate\Client\Model\BulkTransfer[] $bulk_transfers 総合振込明細情報 総合振込明細のリスト
     *
     * @return $this
     */
    public function setBulkTransfers($bulk_transfers)
    {
        $this->container['bulk_transfers'] = $bulk_transfers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


