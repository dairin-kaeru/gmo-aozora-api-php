<?php
/**
 * Balance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ganb\Corporate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GMO Aozora Net Bank Open API
 *
 * <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/business/service/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/corporation/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/corporation/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ganb\Corporate\Client\Model;

use \ArrayAccess;
use \Ganb\Corporate\Client\ObjectSerializer;
use ReturnTypeWillChange;

/**
 * Balance Class Doc Comment
 *
 * @category Class
 * @package  Ganb\Corporate\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Balance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Balance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_id' => 'string',
        'account_type_code' => 'string',
        'account_type_name' => 'string',
        'balance' => 'string',
        'base_date' => 'string',
        'base_time' => 'string',
        'withdrawable_amount' => 'string',
        'previous_day_balance' => 'string',
        'previous_month_balance' => 'string',
        'currency_code' => 'string',
        'currency_name' => 'string',
        'fcy_total_balance' => 'string',
        'ttb' => 'string',
        'base_rate_date' => 'string',
        'base_rate_time' => 'string',
        'yen_equivalent' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_id' => null,
        'account_type_code' => null,
        'account_type_name' => null,
        'balance' => null,
        'base_date' => null,
        'base_time' => null,
        'withdrawable_amount' => null,
        'previous_day_balance' => null,
        'previous_month_balance' => null,
        'currency_code' => null,
        'currency_name' => null,
        'fcy_total_balance' => null,
        'ttb' => null,
        'base_rate_date' => null,
        'base_rate_time' => null,
        'yen_equivalent' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'account_type_code' => 'accountTypeCode',
        'account_type_name' => 'accountTypeName',
        'balance' => 'balance',
        'base_date' => 'baseDate',
        'base_time' => 'baseTime',
        'withdrawable_amount' => 'withdrawableAmount',
        'previous_day_balance' => 'previousDayBalance',
        'previous_month_balance' => 'previousMonthBalance',
        'currency_code' => 'currencyCode',
        'currency_name' => 'currencyName',
        'fcy_total_balance' => 'fcyTotalBalance',
        'ttb' => 'ttb',
        'base_rate_date' => 'baseRateDate',
        'base_rate_time' => 'baseRateTime',
        'yen_equivalent' => 'yenEquivalent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_type_code' => 'setAccountTypeCode',
        'account_type_name' => 'setAccountTypeName',
        'balance' => 'setBalance',
        'base_date' => 'setBaseDate',
        'base_time' => 'setBaseTime',
        'withdrawable_amount' => 'setWithdrawableAmount',
        'previous_day_balance' => 'setPreviousDayBalance',
        'previous_month_balance' => 'setPreviousMonthBalance',
        'currency_code' => 'setCurrencyCode',
        'currency_name' => 'setCurrencyName',
        'fcy_total_balance' => 'setFcyTotalBalance',
        'ttb' => 'setTtb',
        'base_rate_date' => 'setBaseRateDate',
        'base_rate_time' => 'setBaseRateTime',
        'yen_equivalent' => 'setYenEquivalent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_type_code' => 'getAccountTypeCode',
        'account_type_name' => 'getAccountTypeName',
        'balance' => 'getBalance',
        'base_date' => 'getBaseDate',
        'base_time' => 'getBaseTime',
        'withdrawable_amount' => 'getWithdrawableAmount',
        'previous_day_balance' => 'getPreviousDayBalance',
        'previous_month_balance' => 'getPreviousMonthBalance',
        'currency_code' => 'getCurrencyCode',
        'currency_name' => 'getCurrencyName',
        'fcy_total_balance' => 'getFcyTotalBalance',
        'ttb' => 'getTtb',
        'base_rate_date' => 'getBaseRateDate',
        'base_rate_time' => 'getBaseRateTime',
        'yen_equivalent' => 'getYenEquivalent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['account_type_code'] = isset($data['account_type_code']) ? $data['account_type_code'] : null;
        $this->container['account_type_name'] = isset($data['account_type_name']) ? $data['account_type_name'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['base_date'] = isset($data['base_date']) ? $data['base_date'] : null;
        $this->container['base_time'] = isset($data['base_time']) ? $data['base_time'] : null;
        $this->container['withdrawable_amount'] = isset($data['withdrawable_amount']) ? $data['withdrawable_amount'] : null;
        $this->container['previous_day_balance'] = isset($data['previous_day_balance']) ? $data['previous_day_balance'] : null;
        $this->container['previous_month_balance'] = isset($data['previous_month_balance']) ? $data['previous_month_balance'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['currency_name'] = isset($data['currency_name']) ? $data['currency_name'] : null;
        $this->container['fcy_total_balance'] = isset($data['fcy_total_balance']) ? $data['fcy_total_balance'] : null;
        $this->container['ttb'] = isset($data['ttb']) ? $data['ttb'] : null;
        $this->container['base_rate_date'] = isset($data['base_rate_date']) ? $data['base_rate_date'] : null;
        $this->container['base_rate_time'] = isset($data['base_rate_time']) ? $data['base_rate_time'] : null;
        $this->container['yen_equivalent'] = isset($data['yen_equivalent']) ? $data['yen_equivalent'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ((mb_strlen($this->container['account_id']) > 29)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be smaller than or equal to 29.";
        }

        if ((mb_strlen($this->container['account_id']) < 12)) {
            $invalidProperties[] = "invalid value for 'account_id', the character length must be bigger than or equal to 12.";
        }

        if ($this->container['account_type_code'] === null) {
            $invalidProperties[] = "'account_type_code' can't be null";
        }
        if ((mb_strlen($this->container['account_type_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'account_type_code', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['account_type_code']) < 2)) {
            $invalidProperties[] = "invalid value for 'account_type_code', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['account_type_name'] === null) {
            $invalidProperties[] = "'account_type_name' can't be null";
        }
        if ((mb_strlen($this->container['account_type_name']) > 10)) {
            $invalidProperties[] = "invalid value for 'account_type_name', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['account_type_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'account_type_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['balance']) && (mb_strlen($this->container['balance']) > 20)) {
            $invalidProperties[] = "invalid value for 'balance', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['balance']) && (mb_strlen($this->container['balance']) < 1)) {
            $invalidProperties[] = "invalid value for 'balance', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['base_date'] === null) {
            $invalidProperties[] = "'base_date' can't be null";
        }
        if ((mb_strlen($this->container['base_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'base_date', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['base_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'base_date', the character length must be bigger than or equal to 10.";
        }

        if ($this->container['base_time'] === null) {
            $invalidProperties[] = "'base_time' can't be null";
        }
        if ((mb_strlen($this->container['base_time']) > 14)) {
            $invalidProperties[] = "invalid value for 'base_time', the character length must be smaller than or equal to 14.";
        }

        if ((mb_strlen($this->container['base_time']) < 14)) {
            $invalidProperties[] = "invalid value for 'base_time', the character length must be bigger than or equal to 14.";
        }

        if (!is_null($this->container['withdrawable_amount']) && (mb_strlen($this->container['withdrawable_amount']) > 20)) {
            $invalidProperties[] = "invalid value for 'withdrawable_amount', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['withdrawable_amount']) && (mb_strlen($this->container['withdrawable_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'withdrawable_amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['previous_day_balance']) && (mb_strlen($this->container['previous_day_balance']) > 20)) {
            $invalidProperties[] = "invalid value for 'previous_day_balance', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['previous_day_balance']) && (mb_strlen($this->container['previous_day_balance']) < 1)) {
            $invalidProperties[] = "invalid value for 'previous_day_balance', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['previous_month_balance']) && (mb_strlen($this->container['previous_month_balance']) > 20)) {
            $invalidProperties[] = "invalid value for 'previous_month_balance', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['previous_month_balance']) && (mb_strlen($this->container['previous_month_balance']) < 1)) {
            $invalidProperties[] = "invalid value for 'previous_month_balance', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['currency_code'] === null) {
            $invalidProperties[] = "'currency_code' can't be null";
        }
        if ((mb_strlen($this->container['currency_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['currency_code']) < 3)) {
            $invalidProperties[] = "invalid value for 'currency_code', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['currency_name'] === null) {
            $invalidProperties[] = "'currency_name' can't be null";
        }
        if ((mb_strlen($this->container['currency_name']) > 10)) {
            $invalidProperties[] = "invalid value for 'currency_name', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['currency_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'currency_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fcy_total_balance']) && (mb_strlen($this->container['fcy_total_balance']) > 20)) {
            $invalidProperties[] = "invalid value for 'fcy_total_balance', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['fcy_total_balance']) && (mb_strlen($this->container['fcy_total_balance']) < 3)) {
            $invalidProperties[] = "invalid value for 'fcy_total_balance', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['ttb']) && (mb_strlen($this->container['ttb']) > 20)) {
            $invalidProperties[] = "invalid value for 'ttb', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['ttb']) && (mb_strlen($this->container['ttb']) < 3)) {
            $invalidProperties[] = "invalid value for 'ttb', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['base_rate_date']) && (mb_strlen($this->container['base_rate_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'base_rate_date', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['base_rate_date']) && (mb_strlen($this->container['base_rate_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'base_rate_date', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['base_rate_time']) && (mb_strlen($this->container['base_rate_time']) > 14)) {
            $invalidProperties[] = "invalid value for 'base_rate_time', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['base_rate_time']) && (mb_strlen($this->container['base_rate_time']) < 14)) {
            $invalidProperties[] = "invalid value for 'base_rate_time', the character length must be bigger than or equal to 14.";
        }

        if (!is_null($this->container['yen_equivalent']) && (mb_strlen($this->container['yen_equivalent']) > 20)) {
            $invalidProperties[] = "invalid value for 'yen_equivalent', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['yen_equivalent']) && (mb_strlen($this->container['yen_equivalent']) < 1)) {
            $invalidProperties[] = "invalid value for 'yen_equivalent', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string $account_id 口座ID 半角英数字 口座を識別するID
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        if ((mb_strlen($account_id) > 29)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling Balance., must be smaller than or equal to 29.');
        }
        if ((mb_strlen($account_id) < 12)) {
            throw new \InvalidArgumentException('invalid length for $account_id when calling Balance., must be bigger than or equal to 12.');
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_type_code
     *
     * @return string
     */
    public function getAccountTypeCode()
    {
        return $this->container['account_type_code'];
    }

    /**
     * Sets account_type_code
     *
     * @param string $account_type_code 科目コード 半角数字 ・01=普通預金（有利息） ・02=普通預金（決済用） ・11=円定期預金 ・51=外貨普通預金 ・81=証券コネクト口座
     *
     * @return $this
     */
    public function setAccountTypeCode($account_type_code)
    {
        if ((mb_strlen($account_type_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $account_type_code when calling Balance., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($account_type_code) < 2)) {
            throw new \InvalidArgumentException('invalid length for $account_type_code when calling Balance., must be bigger than or equal to 2.');
        }

        $this->container['account_type_code'] = $account_type_code;

        return $this;
    }

    /**
     * Gets account_type_name
     *
     * @return string
     */
    public function getAccountTypeName()
    {
        return $this->container['account_type_name'];
    }

    /**
     * Sets account_type_name
     *
     * @param string $account_type_name 科目名 全角文字 科目コードの名称
     *
     * @return $this
     */
    public function setAccountTypeName($account_type_name)
    {
        if ((mb_strlen($account_type_name) > 10)) {
            throw new \InvalidArgumentException('invalid length for $account_type_name when calling Balance., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($account_type_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $account_type_name when calling Balance., must be bigger than or equal to 1.');
        }

        $this->container['account_type_name'] = $account_type_name;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return string
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param string $balance 現在残高 半角数字　マイナス含む 基準日時における現在残高 科目コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・01=普通預金（有利息） ・02=普通預金（決済用） ・11=円定期預金 ・81=証券コネクト口座
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        if (!is_null($balance) && (mb_strlen($balance) > 20)) {
            throw new \InvalidArgumentException('invalid length for $balance when calling Balance., must be smaller than or equal to 20.');
        }
        if (!is_null($balance) && (mb_strlen($balance) < 1)) {
            throw new \InvalidArgumentException('invalid length for $balance when calling Balance., must be bigger than or equal to 1.');
        }

        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets base_date
     *
     * @return string
     */
    public function getBaseDate()
    {
        return $this->container['base_date'];
    }

    /**
     * Sets base_date
     *
     * @param string $base_date 基準日 半角文字 残高および引出可能額を照会した基準日を示します YYYY-MM-DD形式
     *
     * @return $this
     */
    public function setBaseDate($base_date)
    {
        if ((mb_strlen($base_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $base_date when calling Balance., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($base_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $base_date when calling Balance., must be bigger than or equal to 10.');
        }

        $this->container['base_date'] = $base_date;

        return $this;
    }

    /**
     * Gets base_time
     *
     * @return string
     */
    public function getBaseTime()
    {
        return $this->container['base_time'];
    }

    /**
     * Sets base_time
     *
     * @param string $base_time 基準時刻 半角文字 残高および引出可能額を照会した基準時刻を示します HH:MM:SS+09:00形式
     *
     * @return $this
     */
    public function setBaseTime($base_time)
    {
        if ((mb_strlen($base_time) > 14)) {
            throw new \InvalidArgumentException('invalid length for $base_time when calling Balance., must be smaller than or equal to 14.');
        }
        if ((mb_strlen($base_time) < 14)) {
            throw new \InvalidArgumentException('invalid length for $base_time when calling Balance., must be bigger than or equal to 14.');
        }

        $this->container['base_time'] = $base_time;

        return $this;
    }

    /**
     * Gets withdrawable_amount
     *
     * @return string
     */
    public function getWithdrawableAmount()
    {
        return $this->container['withdrawable_amount'];
    }

    /**
     * Sets withdrawable_amount
     *
     * @param string $withdrawable_amount 支払可能残高 半角数字　マイナス含む 応答時点での引出可能額を示します 科目コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・01=普通預金（有利息） ・02=普通預金（決済用）
     *
     * @return $this
     */
    public function setWithdrawableAmount($withdrawable_amount)
    {
        if (!is_null($withdrawable_amount) && (mb_strlen($withdrawable_amount) > 20)) {
            throw new \InvalidArgumentException('invalid length for $withdrawable_amount when calling Balance., must be smaller than or equal to 20.');
        }
        if (!is_null($withdrawable_amount) && (mb_strlen($withdrawable_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $withdrawable_amount when calling Balance., must be bigger than or equal to 1.');
        }

        $this->container['withdrawable_amount'] = $withdrawable_amount;

        return $this;
    }

    /**
     * Gets previous_day_balance
     *
     * @return string
     */
    public function getPreviousDayBalance()
    {
        return $this->container['previous_day_balance'];
    }

    /**
     * Sets previous_day_balance
     *
     * @param string $previous_day_balance 前日残高 半角数字　マイナス含む 日付が変わった直後は、銀行の締め処理が終わるまでは前々日の残高となります 科目コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・01=普通預金（有利息） ・02=普通預金（決済用）
     *
     * @return $this
     */
    public function setPreviousDayBalance($previous_day_balance)
    {
        if (!is_null($previous_day_balance) && (mb_strlen($previous_day_balance) > 20)) {
            throw new \InvalidArgumentException('invalid length for $previous_day_balance when calling Balance., must be smaller than or equal to 20.');
        }
        if (!is_null($previous_day_balance) && (mb_strlen($previous_day_balance) < 1)) {
            throw new \InvalidArgumentException('invalid length for $previous_day_balance when calling Balance., must be bigger than or equal to 1.');
        }

        $this->container['previous_day_balance'] = $previous_day_balance;

        return $this;
    }

    /**
     * Gets previous_month_balance
     *
     * @return string
     */
    public function getPreviousMonthBalance()
    {
        return $this->container['previous_month_balance'];
    }

    /**
     * Sets previous_month_balance
     *
     * @param string $previous_month_balance 前月末残高 半角数字　マイナス含む 月が変わった直後は、銀行の締め処理が終わるまでは前々月の残高となります  科目コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・01=普通預金（有利息） ・02=普通預金（決済用）
     *
     * @return $this
     */
    public function setPreviousMonthBalance($previous_month_balance)
    {
        if (!is_null($previous_month_balance) && (mb_strlen($previous_month_balance) > 20)) {
            throw new \InvalidArgumentException('invalid length for $previous_month_balance when calling Balance., must be smaller than or equal to 20.');
        }
        if (!is_null($previous_month_balance) && (mb_strlen($previous_month_balance) < 1)) {
            throw new \InvalidArgumentException('invalid length for $previous_month_balance when calling Balance., must be bigger than or equal to 1.');
        }

        $this->container['previous_month_balance'] = $previous_month_balance;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code 通貨コード 半角文字 ISO4217に準拠した通貨コード
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        if ((mb_strlen($currency_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling Balance., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($currency_code) < 3)) {
            throw new \InvalidArgumentException('invalid length for $currency_code when calling Balance., must be bigger than or equal to 3.');
        }

        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets currency_name
     *
     * @return string
     */
    public function getCurrencyName()
    {
        return $this->container['currency_name'];
    }

    /**
     * Sets currency_name
     *
     * @param string $currency_name 通貨名 全角文字 ISO4217に準拠した通貨コードの当行での名称
     *
     * @return $this
     */
    public function setCurrencyName($currency_name)
    {
        if ((mb_strlen($currency_name) > 10)) {
            throw new \InvalidArgumentException('invalid length for $currency_name when calling Balance., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($currency_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $currency_name when calling Balance., must be bigger than or equal to 1.');
        }

        $this->container['currency_name'] = $currency_name;

        return $this;
    }

    /**
     * Gets fcy_total_balance
     *
     * @return string
     */
    public function getFcyTotalBalance()
    {
        return $this->container['fcy_total_balance'];
    }

    /**
     * Sets fcy_total_balance
     *
     * @param string $fcy_total_balance 外貨残高 半角数字　少数点および小数部最大3桁　マイナス含む 科目コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・51=外貨普通預金
     *
     * @return $this
     */
    public function setFcyTotalBalance($fcy_total_balance)
    {
        if (!is_null($fcy_total_balance) && (mb_strlen($fcy_total_balance) > 20)) {
            throw new \InvalidArgumentException('invalid length for $fcy_total_balance when calling Balance., must be smaller than or equal to 20.');
        }
        if (!is_null($fcy_total_balance) && (mb_strlen($fcy_total_balance) < 3)) {
            throw new \InvalidArgumentException('invalid length for $fcy_total_balance when calling Balance., must be bigger than or equal to 3.');
        }

        $this->container['fcy_total_balance'] = $fcy_total_balance;

        return $this;
    }

    /**
     * Gets ttb
     *
     * @return string
     */
    public function getTtb()
    {
        return $this->container['ttb'];
    }

    /**
     * Sets ttb
     *
     * @param string $ttb 外貨レート 半角数字　少数点および小数部最大3桁　マイナス含む 科目コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・51=外貨普通預金
     *
     * @return $this
     */
    public function setTtb($ttb)
    {
        if (!is_null($ttb) && (mb_strlen($ttb) > 20)) {
            throw new \InvalidArgumentException('invalid length for $ttb when calling Balance., must be smaller than or equal to 20.');
        }
        if (!is_null($ttb) && (mb_strlen($ttb) < 3)) {
            throw new \InvalidArgumentException('invalid length for $ttb when calling Balance., must be bigger than or equal to 3.');
        }

        $this->container['ttb'] = $ttb;

        return $this;
    }

    /**
     * Gets base_rate_date
     *
     * @return string
     */
    public function getBaseRateDate()
    {
        return $this->container['base_rate_date'];
    }

    /**
     * Sets base_rate_date
     *
     * @param string $base_rate_date 外貨レート基準日 半角文字 外貨レートの基準日を示します YYYY-MM-DD形式 科目コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・51=外貨普通預金
     *
     * @return $this
     */
    public function setBaseRateDate($base_rate_date)
    {
        if (!is_null($base_rate_date) && (mb_strlen($base_rate_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $base_rate_date when calling Balance., must be smaller than or equal to 10.');
        }
        if (!is_null($base_rate_date) && (mb_strlen($base_rate_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $base_rate_date when calling Balance., must be bigger than or equal to 10.');
        }

        $this->container['base_rate_date'] = $base_rate_date;

        return $this;
    }

    /**
     * Gets base_rate_time
     *
     * @return string
     */
    public function getBaseRateTime()
    {
        return $this->container['base_rate_time'];
    }

    /**
     * Sets base_rate_time
     *
     * @param string $base_rate_time 外貨レート基準時刻 半角文字 外貨レートの基準時刻を示します HH:MM:SS+09:00形式 科目コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・51=外貨普通預金
     *
     * @return $this
     */
    public function setBaseRateTime($base_rate_time)
    {
        if (!is_null($base_rate_time) && (mb_strlen($base_rate_time) > 14)) {
            throw new \InvalidArgumentException('invalid length for $base_rate_time when calling Balance., must be smaller than or equal to 14.');
        }
        if (!is_null($base_rate_time) && (mb_strlen($base_rate_time) < 14)) {
            throw new \InvalidArgumentException('invalid length for $base_rate_time when calling Balance., must be bigger than or equal to 14.');
        }

        $this->container['base_rate_time'] = $base_rate_time;

        return $this;
    }

    /**
     * Gets yen_equivalent
     *
     * @return string
     */
    public function getYenEquivalent()
    {
        return $this->container['yen_equivalent'];
    }

    /**
     * Sets yen_equivalent
     *
     * @param string $yen_equivalent 外貨円換算額 半角数字　マイナス含む 外貨残高を円に換算した額 科目コードが以下の場合のみ設定されます 該当しない場合は項目自体を設定しません ・51=外貨普通預金
     *
     * @return $this
     */
    public function setYenEquivalent($yen_equivalent)
    {
        if (!is_null($yen_equivalent) && (mb_strlen($yen_equivalent) > 20)) {
            throw new \InvalidArgumentException('invalid length for $yen_equivalent when calling Balance., must be smaller than or equal to 20.');
        }
        if (!is_null($yen_equivalent) && (mb_strlen($yen_equivalent) < 1)) {
            throw new \InvalidArgumentException('invalid length for $yen_equivalent when calling Balance., must be bigger than or equal to 1.');
        }

        $this->container['yen_equivalent'] = $yen_equivalent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


