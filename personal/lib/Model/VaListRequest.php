<?php
/**
 * VaListRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ganb\Personal\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GMO Aozora Net Bank Open API
 *
 * <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/business/service/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/personal/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/personal/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ganb\Personal\Client\Model;

use \ArrayAccess;
use \Ganb\Personal\Client\ObjectSerializer;
use ReturnTypeWillChange;

/**
 * VaListRequest Class Doc Comment
 *
 * @category Class
 * @package  Ganb\Personal\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VaListRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VaListRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'va_contract_auth_key' => 'string',
        'va_type_code' => 'string',
        'deposit_amount_exist_code' => 'string',
        'va_holder_name_kana' => 'string',
        'va_status_code_list' => '\Ganb\Personal\Client\Model\VaStatusCode[]',
        'latest_deposit_date_from' => 'string',
        'latest_deposit_date_to' => 'string',
        'va_issue_date_from' => 'string',
        'va_issue_date_to' => 'string',
        'expire_date_from' => 'string',
        'expire_date_to' => 'string',
        'ra_id' => 'string',
        'next_item_key' => 'string',
        'sort_item_code' => 'string',
        'sort_order_code' => 'string',
        'va_id_list' => '\Ganb\Personal\Client\Model\VaId[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'va_contract_auth_key' => null,
        'va_type_code' => null,
        'deposit_amount_exist_code' => null,
        'va_holder_name_kana' => null,
        'va_status_code_list' => null,
        'latest_deposit_date_from' => null,
        'latest_deposit_date_to' => null,
        'va_issue_date_from' => null,
        'va_issue_date_to' => null,
        'expire_date_from' => null,
        'expire_date_to' => null,
        'ra_id' => null,
        'next_item_key' => null,
        'sort_item_code' => null,
        'sort_order_code' => null,
        'va_id_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'va_contract_auth_key' => 'vaContractAuthKey',
        'va_type_code' => 'vaTypeCode',
        'deposit_amount_exist_code' => 'depositAmountExistCode',
        'va_holder_name_kana' => 'vaHolderNameKana',
        'va_status_code_list' => 'vaStatusCodeList',
        'latest_deposit_date_from' => 'latestDepositDateFrom',
        'latest_deposit_date_to' => 'latestDepositDateTo',
        'va_issue_date_from' => 'vaIssueDateFrom',
        'va_issue_date_to' => 'vaIssueDateTo',
        'expire_date_from' => 'expireDateFrom',
        'expire_date_to' => 'expireDateTo',
        'ra_id' => 'raId',
        'next_item_key' => 'nextItemKey',
        'sort_item_code' => 'sortItemCode',
        'sort_order_code' => 'sortOrderCode',
        'va_id_list' => 'vaIdList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'va_contract_auth_key' => 'setVaContractAuthKey',
        'va_type_code' => 'setVaTypeCode',
        'deposit_amount_exist_code' => 'setDepositAmountExistCode',
        'va_holder_name_kana' => 'setVaHolderNameKana',
        'va_status_code_list' => 'setVaStatusCodeList',
        'latest_deposit_date_from' => 'setLatestDepositDateFrom',
        'latest_deposit_date_to' => 'setLatestDepositDateTo',
        'va_issue_date_from' => 'setVaIssueDateFrom',
        'va_issue_date_to' => 'setVaIssueDateTo',
        'expire_date_from' => 'setExpireDateFrom',
        'expire_date_to' => 'setExpireDateTo',
        'ra_id' => 'setRaId',
        'next_item_key' => 'setNextItemKey',
        'sort_item_code' => 'setSortItemCode',
        'sort_order_code' => 'setSortOrderCode',
        'va_id_list' => 'setVaIdList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'va_contract_auth_key' => 'getVaContractAuthKey',
        'va_type_code' => 'getVaTypeCode',
        'deposit_amount_exist_code' => 'getDepositAmountExistCode',
        'va_holder_name_kana' => 'getVaHolderNameKana',
        'va_status_code_list' => 'getVaStatusCodeList',
        'latest_deposit_date_from' => 'getLatestDepositDateFrom',
        'latest_deposit_date_to' => 'getLatestDepositDateTo',
        'va_issue_date_from' => 'getVaIssueDateFrom',
        'va_issue_date_to' => 'getVaIssueDateTo',
        'expire_date_from' => 'getExpireDateFrom',
        'expire_date_to' => 'getExpireDateTo',
        'ra_id' => 'getRaId',
        'next_item_key' => 'getNextItemKey',
        'sort_item_code' => 'getSortItemCode',
        'sort_order_code' => 'getSortOrderCode',
        'va_id_list' => 'getVaIdList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['va_contract_auth_key'] = isset($data['va_contract_auth_key']) ? $data['va_contract_auth_key'] : null;
        $this->container['va_type_code'] = isset($data['va_type_code']) ? $data['va_type_code'] : null;
        $this->container['deposit_amount_exist_code'] = isset($data['deposit_amount_exist_code']) ? $data['deposit_amount_exist_code'] : null;
        $this->container['va_holder_name_kana'] = isset($data['va_holder_name_kana']) ? $data['va_holder_name_kana'] : null;
        $this->container['va_status_code_list'] = isset($data['va_status_code_list']) ? $data['va_status_code_list'] : null;
        $this->container['latest_deposit_date_from'] = isset($data['latest_deposit_date_from']) ? $data['latest_deposit_date_from'] : null;
        $this->container['latest_deposit_date_to'] = isset($data['latest_deposit_date_to']) ? $data['latest_deposit_date_to'] : null;
        $this->container['va_issue_date_from'] = isset($data['va_issue_date_from']) ? $data['va_issue_date_from'] : null;
        $this->container['va_issue_date_to'] = isset($data['va_issue_date_to']) ? $data['va_issue_date_to'] : null;
        $this->container['expire_date_from'] = isset($data['expire_date_from']) ? $data['expire_date_from'] : null;
        $this->container['expire_date_to'] = isset($data['expire_date_to']) ? $data['expire_date_to'] : null;
        $this->container['ra_id'] = isset($data['ra_id']) ? $data['ra_id'] : null;
        $this->container['next_item_key'] = isset($data['next_item_key']) ? $data['next_item_key'] : null;
        $this->container['sort_item_code'] = isset($data['sort_item_code']) ? $data['sort_item_code'] : null;
        $this->container['sort_order_code'] = isset($data['sort_order_code']) ? $data['sort_order_code'] : null;
        $this->container['va_id_list'] = isset($data['va_id_list']) ? $data['va_id_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['va_contract_auth_key']) && (mb_strlen($this->container['va_contract_auth_key']) > 400)) {
            $invalidProperties[] = "invalid value for 'va_contract_auth_key', the character length must be smaller than or equal to 400.";
        }

        if (!is_null($this->container['va_contract_auth_key']) && (mb_strlen($this->container['va_contract_auth_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_contract_auth_key', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['va_type_code']) && (mb_strlen($this->container['va_type_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'va_type_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['va_type_code']) && (mb_strlen($this->container['va_type_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_type_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['deposit_amount_exist_code']) && (mb_strlen($this->container['deposit_amount_exist_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'deposit_amount_exist_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['deposit_amount_exist_code']) && (mb_strlen($this->container['deposit_amount_exist_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'deposit_amount_exist_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['va_holder_name_kana']) && (mb_strlen($this->container['va_holder_name_kana']) > 40)) {
            $invalidProperties[] = "invalid value for 'va_holder_name_kana', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['va_holder_name_kana']) && (mb_strlen($this->container['va_holder_name_kana']) < 1)) {
            $invalidProperties[] = "invalid value for 'va_holder_name_kana', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['latest_deposit_date_from']) && (mb_strlen($this->container['latest_deposit_date_from']) > 10)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_date_from', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['latest_deposit_date_from']) && (mb_strlen($this->container['latest_deposit_date_from']) < 10)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_date_from', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['latest_deposit_date_to']) && (mb_strlen($this->container['latest_deposit_date_to']) > 10)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_date_to', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['latest_deposit_date_to']) && (mb_strlen($this->container['latest_deposit_date_to']) < 10)) {
            $invalidProperties[] = "invalid value for 'latest_deposit_date_to', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['va_issue_date_from']) && (mb_strlen($this->container['va_issue_date_from']) > 10)) {
            $invalidProperties[] = "invalid value for 'va_issue_date_from', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['va_issue_date_from']) && (mb_strlen($this->container['va_issue_date_from']) < 10)) {
            $invalidProperties[] = "invalid value for 'va_issue_date_from', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['va_issue_date_to']) && (mb_strlen($this->container['va_issue_date_to']) > 10)) {
            $invalidProperties[] = "invalid value for 'va_issue_date_to', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['va_issue_date_to']) && (mb_strlen($this->container['va_issue_date_to']) < 10)) {
            $invalidProperties[] = "invalid value for 'va_issue_date_to', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['expire_date_from']) && (mb_strlen($this->container['expire_date_from']) > 10)) {
            $invalidProperties[] = "invalid value for 'expire_date_from', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['expire_date_from']) && (mb_strlen($this->container['expire_date_from']) < 10)) {
            $invalidProperties[] = "invalid value for 'expire_date_from', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['expire_date_to']) && (mb_strlen($this->container['expire_date_to']) > 10)) {
            $invalidProperties[] = "invalid value for 'expire_date_to', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['expire_date_to']) && (mb_strlen($this->container['expire_date_to']) < 10)) {
            $invalidProperties[] = "invalid value for 'expire_date_to', the character length must be bigger than or equal to 10.";
        }

        if (!is_null($this->container['ra_id']) && (mb_strlen($this->container['ra_id']) > 29)) {
            $invalidProperties[] = "invalid value for 'ra_id', the character length must be smaller than or equal to 29.";
        }

        if (!is_null($this->container['ra_id']) && (mb_strlen($this->container['ra_id']) < 12)) {
            $invalidProperties[] = "invalid value for 'ra_id', the character length must be bigger than or equal to 12.";
        }

        if (!is_null($this->container['next_item_key']) && (mb_strlen($this->container['next_item_key']) > 24)) {
            $invalidProperties[] = "invalid value for 'next_item_key', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['next_item_key']) && (mb_strlen($this->container['next_item_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'next_item_key', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sort_item_code']) && (mb_strlen($this->container['sort_item_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'sort_item_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['sort_item_code']) && (mb_strlen($this->container['sort_item_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'sort_item_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sort_order_code']) && (mb_strlen($this->container['sort_order_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'sort_order_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['sort_order_code']) && (mb_strlen($this->container['sort_order_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'sort_order_code', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets va_contract_auth_key
     *
     * @return string
     */
    public function getVaContractAuthKey()
    {
        return $this->container['va_contract_auth_key'];
    }

    /**
     * Sets va_contract_auth_key
     *
     * @param string $va_contract_auth_key 振込入金口座API認証情報 半角英数字 NULLを設定 値が設定されている場合は「400 Bad Request」を返却
     *
     * @return $this
     */
    public function setVaContractAuthKey($va_contract_auth_key)
    {
        if (!is_null($va_contract_auth_key) && (mb_strlen($va_contract_auth_key) > 400)) {
            throw new \InvalidArgumentException('invalid length for $va_contract_auth_key when calling VaListRequest., must be smaller than or equal to 400.');
        }
        if (!is_null($va_contract_auth_key) && (mb_strlen($va_contract_auth_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_contract_auth_key when calling VaListRequest., must be bigger than or equal to 1.');
        }

        $this->container['va_contract_auth_key'] = $va_contract_auth_key;

        return $this;
    }

    /**
     * Gets va_type_code
     *
     * @return string
     */
    public function getVaTypeCode()
    {
        return $this->container['va_type_code'];
    }

    /**
     * Sets va_type_code
     *
     * @param string $va_type_code 振込入金口座　種類コード 半角数字 ・1=期限型 ・2=継続型
     *
     * @return $this
     */
    public function setVaTypeCode($va_type_code)
    {
        if (!is_null($va_type_code) && (mb_strlen($va_type_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $va_type_code when calling VaListRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($va_type_code) && (mb_strlen($va_type_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_type_code when calling VaListRequest., must be bigger than or equal to 1.');
        }

        $this->container['va_type_code'] = $va_type_code;

        return $this;
    }

    /**
     * Gets deposit_amount_exist_code
     *
     * @return string
     */
    public function getDepositAmountExistCode()
    {
        return $this->container['deposit_amount_exist_code'];
    }

    /**
     * Sets deposit_amount_exist_code
     *
     * @param string $deposit_amount_exist_code 入金有無コード 半角数字 ・1=入金あり ・2=入金なし
     *
     * @return $this
     */
    public function setDepositAmountExistCode($deposit_amount_exist_code)
    {
        if (!is_null($deposit_amount_exist_code) && (mb_strlen($deposit_amount_exist_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $deposit_amount_exist_code when calling VaListRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($deposit_amount_exist_code) && (mb_strlen($deposit_amount_exist_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $deposit_amount_exist_code when calling VaListRequest., must be bigger than or equal to 1.');
        }

        $this->container['deposit_amount_exist_code'] = $deposit_amount_exist_code;

        return $this;
    }

    /**
     * Gets va_holder_name_kana
     *
     * @return string
     */
    public function getVaHolderNameKana()
    {
        return $this->container['va_holder_name_kana'];
    }

    /**
     * Sets va_holder_name_kana
     *
     * @param string $va_holder_name_kana 振込入金口座名義カナ 半角文字 振込許容文字を指定可 ただし、一部の非許容文字は、許容文字に変換を行います
     *
     * @return $this
     */
    public function setVaHolderNameKana($va_holder_name_kana)
    {
        if (!is_null($va_holder_name_kana) && (mb_strlen($va_holder_name_kana) > 40)) {
            throw new \InvalidArgumentException('invalid length for $va_holder_name_kana when calling VaListRequest., must be smaller than or equal to 40.');
        }
        if (!is_null($va_holder_name_kana) && (mb_strlen($va_holder_name_kana) < 1)) {
            throw new \InvalidArgumentException('invalid length for $va_holder_name_kana when calling VaListRequest., must be bigger than or equal to 1.');
        }

        $this->container['va_holder_name_kana'] = $va_holder_name_kana;

        return $this;
    }

    /**
     * Gets va_status_code_list
     *
     * @return \Ganb\Personal\Client\Model\VaStatusCode[]
     */
    public function getVaStatusCodeList()
    {
        return $this->container['va_status_code_list'];
    }

    /**
     * Sets va_status_code_list
     *
     * @param \Ganb\Personal\Client\Model\VaStatusCode[] $va_status_code_list 振込入金口座IDリスト 照会したい振込入金口座状態コードのリスト 上限3件まで設定可能
     *
     * @return $this
     */
    public function setVaStatusCodeList($va_status_code_list)
    {
        $this->container['va_status_code_list'] = $va_status_code_list;

        return $this;
    }

    /**
     * Gets latest_deposit_date_from
     *
     * @return string
     */
    public function getLatestDepositDateFrom()
    {
        return $this->container['latest_deposit_date_from'];
    }

    /**
     * Sets latest_deposit_date_from
     *
     * @param string $latest_deposit_date_from 最終入金日From 半角文字 YYYY-MM-DD形式 入金有無コードが未設定もしくは、「1=入金あり」が設定されている場合は指定可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）
     *
     * @return $this
     */
    public function setLatestDepositDateFrom($latest_deposit_date_from)
    {
        if (!is_null($latest_deposit_date_from) && (mb_strlen($latest_deposit_date_from) > 10)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_date_from when calling VaListRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($latest_deposit_date_from) && (mb_strlen($latest_deposit_date_from) < 10)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_date_from when calling VaListRequest., must be bigger than or equal to 10.');
        }

        $this->container['latest_deposit_date_from'] = $latest_deposit_date_from;

        return $this;
    }

    /**
     * Gets latest_deposit_date_to
     *
     * @return string
     */
    public function getLatestDepositDateTo()
    {
        return $this->container['latest_deposit_date_to'];
    }

    /**
     * Sets latest_deposit_date_to
     *
     * @param string $latest_deposit_date_to 最終入金日To 半角文字 YYYY-MM-DD形式 入金有無コードが未設定もしくは、「1=入金あり」が設定されている場合は指定可 それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却） 最終入金日Fromと最終入金日Toを指定する場合は、最終入金日From≦最終入金日Toとし、それ以外は「400 Bad Request」を返却
     *
     * @return $this
     */
    public function setLatestDepositDateTo($latest_deposit_date_to)
    {
        if (!is_null($latest_deposit_date_to) && (mb_strlen($latest_deposit_date_to) > 10)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_date_to when calling VaListRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($latest_deposit_date_to) && (mb_strlen($latest_deposit_date_to) < 10)) {
            throw new \InvalidArgumentException('invalid length for $latest_deposit_date_to when calling VaListRequest., must be bigger than or equal to 10.');
        }

        $this->container['latest_deposit_date_to'] = $latest_deposit_date_to;

        return $this;
    }

    /**
     * Gets va_issue_date_from
     *
     * @return string
     */
    public function getVaIssueDateFrom()
    {
        return $this->container['va_issue_date_from'];
    }

    /**
     * Sets va_issue_date_from
     *
     * @param string $va_issue_date_from 振込入金口座発行日From 半角文字 YYYY-MM-DD形式
     *
     * @return $this
     */
    public function setVaIssueDateFrom($va_issue_date_from)
    {
        if (!is_null($va_issue_date_from) && (mb_strlen($va_issue_date_from) > 10)) {
            throw new \InvalidArgumentException('invalid length for $va_issue_date_from when calling VaListRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($va_issue_date_from) && (mb_strlen($va_issue_date_from) < 10)) {
            throw new \InvalidArgumentException('invalid length for $va_issue_date_from when calling VaListRequest., must be bigger than or equal to 10.');
        }

        $this->container['va_issue_date_from'] = $va_issue_date_from;

        return $this;
    }

    /**
     * Gets va_issue_date_to
     *
     * @return string
     */
    public function getVaIssueDateTo()
    {
        return $this->container['va_issue_date_to'];
    }

    /**
     * Sets va_issue_date_to
     *
     * @param string $va_issue_date_to 振込入金口座発行日To 半角文字 YYYY-MM-DD形式 振込入金口座発行Fromと振込入金口座発行Toを指定する場合は、振込入金口座発行From≦振込入金口座発行Toとし、それ以外は「400 Bad Request」を返却
     *
     * @return $this
     */
    public function setVaIssueDateTo($va_issue_date_to)
    {
        if (!is_null($va_issue_date_to) && (mb_strlen($va_issue_date_to) > 10)) {
            throw new \InvalidArgumentException('invalid length for $va_issue_date_to when calling VaListRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($va_issue_date_to) && (mb_strlen($va_issue_date_to) < 10)) {
            throw new \InvalidArgumentException('invalid length for $va_issue_date_to when calling VaListRequest., must be bigger than or equal to 10.');
        }

        $this->container['va_issue_date_to'] = $va_issue_date_to;

        return $this;
    }

    /**
     * Gets expire_date_from
     *
     * @return string
     */
    public function getExpireDateFrom()
    {
        return $this->container['expire_date_from'];
    }

    /**
     * Sets expire_date_from
     *
     * @param string $expire_date_from 有効期限From 半角文字 YYYY-MM-DD形式 振込入金口座 種類コードが未設定もしくは、「1＝期限型」が設定されている場合は指定可　それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）
     *
     * @return $this
     */
    public function setExpireDateFrom($expire_date_from)
    {
        if (!is_null($expire_date_from) && (mb_strlen($expire_date_from) > 10)) {
            throw new \InvalidArgumentException('invalid length for $expire_date_from when calling VaListRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($expire_date_from) && (mb_strlen($expire_date_from) < 10)) {
            throw new \InvalidArgumentException('invalid length for $expire_date_from when calling VaListRequest., must be bigger than or equal to 10.');
        }

        $this->container['expire_date_from'] = $expire_date_from;

        return $this;
    }

    /**
     * Gets expire_date_to
     *
     * @return string
     */
    public function getExpireDateTo()
    {
        return $this->container['expire_date_to'];
    }

    /**
     * Sets expire_date_to
     *
     * @param string $expire_date_to 有効期限To 半角文字 YYYY-MM-DD形式 振込入金口座 種類コードが未設定もしくは、「1＝期限型」が設定されている場合は指定可　それ以外はNULLを設定（値が設定されている場合は、「400 Bad Request」を返却）
     *
     * @return $this
     */
    public function setExpireDateTo($expire_date_to)
    {
        if (!is_null($expire_date_to) && (mb_strlen($expire_date_to) > 10)) {
            throw new \InvalidArgumentException('invalid length for $expire_date_to when calling VaListRequest., must be smaller than or equal to 10.');
        }
        if (!is_null($expire_date_to) && (mb_strlen($expire_date_to) < 10)) {
            throw new \InvalidArgumentException('invalid length for $expire_date_to when calling VaListRequest., must be bigger than or equal to 10.');
        }

        $this->container['expire_date_to'] = $expire_date_to;

        return $this;
    }

    /**
     * Gets ra_id
     *
     * @return string
     */
    public function getRaId()
    {
        return $this->container['ra_id'];
    }

    /**
     * Sets ra_id
     *
     * @param string $ra_id 入金口座ID 半角数字 口座一覧照会APIで取得できる口座IDを設定 科目コードが以下の口座IDのみ受け付けます ・01=普通預金（有利息） ・02=普通預金（決済用）
     *
     * @return $this
     */
    public function setRaId($ra_id)
    {
        if (!is_null($ra_id) && (mb_strlen($ra_id) > 29)) {
            throw new \InvalidArgumentException('invalid length for $ra_id when calling VaListRequest., must be smaller than or equal to 29.');
        }
        if (!is_null($ra_id) && (mb_strlen($ra_id) < 12)) {
            throw new \InvalidArgumentException('invalid length for $ra_id when calling VaListRequest., must be bigger than or equal to 12.');
        }

        $this->container['ra_id'] = $ra_id;

        return $this;
    }

    /**
     * Gets next_item_key
     *
     * @return string
     */
    public function getNextItemKey()
    {
        return $this->container['next_item_key'];
    }

    /**
     * Sets next_item_key
     *
     * @param string $next_item_key 次一覧キー 半角英数字
     *
     * @return $this
     */
    public function setNextItemKey($next_item_key)
    {
        if (!is_null($next_item_key) && (mb_strlen($next_item_key) > 24)) {
            throw new \InvalidArgumentException('invalid length for $next_item_key when calling VaListRequest., must be smaller than or equal to 24.');
        }
        if (!is_null($next_item_key) && (mb_strlen($next_item_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $next_item_key when calling VaListRequest., must be bigger than or equal to 1.');
        }

        $this->container['next_item_key'] = $next_item_key;

        return $this;
    }

    /**
     * Gets sort_item_code
     *
     * @return string
     */
    public function getSortItemCode()
    {
        return $this->container['sort_item_code'];
    }

    /**
     * Sets sort_item_code
     *
     * @param string $sort_item_code ソート項目コード 半角数字 ・1=有効期限日時 ・2=最終入金日 ・3=発行日時 ・4=最終入金金額 有効期限日時、最終入金日、最終入金金額など、レスポンスで返却されない場合がある項目をソート項目に指定した場合、ソートは効きません
     *
     * @return $this
     */
    public function setSortItemCode($sort_item_code)
    {
        if (!is_null($sort_item_code) && (mb_strlen($sort_item_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sort_item_code when calling VaListRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($sort_item_code) && (mb_strlen($sort_item_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sort_item_code when calling VaListRequest., must be bigger than or equal to 1.');
        }

        $this->container['sort_item_code'] = $sort_item_code;

        return $this;
    }

    /**
     * Gets sort_order_code
     *
     * @return string
     */
    public function getSortOrderCode()
    {
        return $this->container['sort_order_code'];
    }

    /**
     * Sets sort_order_code
     *
     * @param string $sort_order_code ソート順コード 半角数字 ソート項目コードのソート順を指定するコード値 ・1=昇順 ・2=降順
     *
     * @return $this
     */
    public function setSortOrderCode($sort_order_code)
    {
        if (!is_null($sort_order_code) && (mb_strlen($sort_order_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $sort_order_code when calling VaListRequest., must be smaller than or equal to 1.');
        }
        if (!is_null($sort_order_code) && (mb_strlen($sort_order_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sort_order_code when calling VaListRequest., must be bigger than or equal to 1.');
        }

        $this->container['sort_order_code'] = $sort_order_code;

        return $this;
    }

    /**
     * Gets va_id_list
     *
     * @return \Ganb\Personal\Client\Model\VaId[]
     */
    public function getVaIdList()
    {
        return $this->container['va_id_list'];
    }

    /**
     * Sets va_id_list
     *
     * @param \Ganb\Personal\Client\Model\VaId[] $va_id_list 振込入金口座IDリスト 照会したい振込入金口座IDのリスト 上限500件まで設定可能
     *
     * @return $this
     */
    public function setVaIdList($va_id_list)
    {
        $this->container['va_id_list'] = $va_id_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


