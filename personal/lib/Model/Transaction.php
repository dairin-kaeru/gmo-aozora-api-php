<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ganb\Personal\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * GMO Aozora Net Bank Open API
 *
 * <p>オープンAPI仕様書（PDF版）は下記リンクをご参照ください</p> <div>   <div style='display:inline-block;'><a style='text-decoration:none; font-weight:bold; color:#00b8d4;' href='https://gmo-aozora.com/business/service/api-specification.html' target='_blank'>オープンAPI仕様書</a></div><div style='display:inline-block; margin-left:2px; left:2px; width:10px; height:10px; border-top:2px solid #00b8d4; border-right:2px solid #00b8d4; transparent;-webkit-transform:rotate(45deg); transform: rotate(45deg);'></div> </div> <h4 style='margin-top:30px; border-left: solid 4px #1B2F48; padding: 0.1em 0.5em; color:#1B2F48;'>共通仕様</h4> <div style='width:100%; margin:10px;'>   <p style='font-weight:bold; color:#616161;'>＜HTTPリクエストヘッダ＞</p>   <div style='display:table; margin-left:10px; background-color:#29659b;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff;'>項目</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; color:#fff;'>仕様</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>プロトコル</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>HTTP1.1/HTTPS</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>charset</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>UTF-8</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>content-type</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>application/json</div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>domain_name</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       本番環境：api.gmo-aozora.com</br>       開発環境：stg-api.gmo-aozora.com     </div>   </div>   <div style='display:table; margin-left:10px;'>     <div style='display:table-cell; min-width:130px; padding:9px; border:1px solid #fff; color:#fff; background-color:#29659b;'>メインURL</div>     <div style='display:table-cell; width:85%; padding:9px; border:1px solid #fff; background-color:#f8f8f8;'>       https://{domain_name}/ganb/api/personal/{version}</br>       <span style='border-bottom:solid 1px;'>Version:1.x.x</span> の場合</br>       　https://api.gmo-aozora.com/ganb/api/personal/<span style='border-bottom:solid 1px;'>v1</span>     </div>   </div> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜リクエスト共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <p style='padding-left:40px;'>パラメータの値が空の場合、またはパラメータ自体が設定されていない場合、どちらもNULLとして扱います</p> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜レスポンス共通仕様＞</p>   <p style='padding-left:20px; font-weight:bold; color:#616161;'>NULLデータの扱い</p>   <ul>     <li>レスポンスデータ</li>       <ul>         <li style='list-style-type:none;'>レスポンスデータの値が空の場合または、レスポンスデータ自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>     <li>配列</li>       <ul>         <li style='list-style-type:none;'>配列の要素の値が空の場合は「空のリスト」と記載</li>         <li style='list-style-type:none;'>配列自体が設定されない場合は「項目自体を設定しません」と記載</li>       </ul>   </ul> </div> <div style='margin:20px 10px;'>   <p style='font-weight:bold; color:#616161;'>＜更新系APIに関する注意事項＞</p>   <ul>     <li style='list-style-type:none;'>更新系処理がタイムアウトとなった場合、処理自体は実行されている可能性がありますので、</li>     <li style='list-style-type:none;'>再実行を行う必要がある場合は必ず照会系の処理で実行状況を確認してから再実行を行ってください</li>   </ul> </div>
 *
 * OpenAPI spec version: 1.1.12
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ganb\Personal\Client\Model;

use \ArrayAccess;
use \Ganb\Personal\Client\ObjectSerializer;
use ReturnTypeWillChange;

/**
 * Transaction Class Doc Comment
 *
 * @category Class
 * @package  Ganb\Personal\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Transaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Transaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transaction_date' => 'string',
        'value_date' => 'string',
        'transaction_type' => 'string',
        'amount' => 'string',
        'remarks' => 'string',
        'balance' => 'string',
        'item_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transaction_date' => null,
        'value_date' => null,
        'transaction_type' => null,
        'amount' => null,
        'remarks' => null,
        'balance' => null,
        'item_key' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_date' => 'transactionDate',
        'value_date' => 'valueDate',
        'transaction_type' => 'transactionType',
        'amount' => 'amount',
        'remarks' => 'remarks',
        'balance' => 'balance',
        'item_key' => 'itemKey'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_date' => 'setTransactionDate',
        'value_date' => 'setValueDate',
        'transaction_type' => 'setTransactionType',
        'amount' => 'setAmount',
        'remarks' => 'setRemarks',
        'balance' => 'setBalance',
        'item_key' => 'setItemKey'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_date' => 'getTransactionDate',
        'value_date' => 'getValueDate',
        'transaction_type' => 'getTransactionType',
        'amount' => 'getAmount',
        'remarks' => 'getRemarks',
        'balance' => 'getBalance',
        'item_key' => 'getItemKey'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_date'] = isset($data['transaction_date']) ? $data['transaction_date'] : null;
        $this->container['value_date'] = isset($data['value_date']) ? $data['value_date'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : null;
        $this->container['item_key'] = isset($data['item_key']) ? $data['item_key'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_date'] === null) {
            $invalidProperties[] = "'transaction_date' can't be null";
        }
        if ((mb_strlen($this->container['transaction_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'transaction_date', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['transaction_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'transaction_date', the character length must be bigger than or equal to 10.";
        }

        if ($this->container['value_date'] === null) {
            $invalidProperties[] = "'value_date' can't be null";
        }
        if ((mb_strlen($this->container['value_date']) > 10)) {
            $invalidProperties[] = "invalid value for 'value_date', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['value_date']) < 10)) {
            $invalidProperties[] = "invalid value for 'value_date', the character length must be bigger than or equal to 10.";
        }

        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        if ((mb_strlen($this->container['transaction_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'transaction_type', the character length must be smaller than or equal to 1.";
        }

        if ((mb_strlen($this->container['transaction_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ((mb_strlen($this->container['amount']) > 20)) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['remarks']) && (mb_strlen($this->container['remarks']) > 255)) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['remarks']) && (mb_strlen($this->container['remarks']) < 1)) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['balance'] === null) {
            $invalidProperties[] = "'balance' can't be null";
        }
        if ((mb_strlen($this->container['balance']) > 20)) {
            $invalidProperties[] = "invalid value for 'balance', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['balance']) < 1)) {
            $invalidProperties[] = "invalid value for 'balance', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['item_key']) && (mb_strlen($this->container['item_key']) > 24)) {
            $invalidProperties[] = "invalid value for 'item_key', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['item_key']) && (mb_strlen($this->container['item_key']) < 1)) {
            $invalidProperties[] = "invalid value for 'item_key', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_date
     *
     * @return string
     */
    public function getTransactionDate()
    {
        return $this->container['transaction_date'];
    }

    /**
     * Sets transaction_date
     *
     * @param string $transaction_date 取引日 半角文字 YYYY-MM-DD形式
     *
     * @return $this
     */
    public function setTransactionDate($transaction_date)
    {
        if ((mb_strlen($transaction_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $transaction_date when calling Transaction., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($transaction_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $transaction_date when calling Transaction., must be bigger than or equal to 10.');
        }

        $this->container['transaction_date'] = $transaction_date;

        return $this;
    }

    /**
     * Gets value_date
     *
     * @return string
     */
    public function getValueDate()
    {
        return $this->container['value_date'];
    }

    /**
     * Sets value_date
     *
     * @param string $value_date 起算日 半角文字 YYYY-MM-DD形式
     *
     * @return $this
     */
    public function setValueDate($value_date)
    {
        if ((mb_strlen($value_date) > 10)) {
            throw new \InvalidArgumentException('invalid length for $value_date when calling Transaction., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($value_date) < 10)) {
            throw new \InvalidArgumentException('invalid length for $value_date when calling Transaction., must be bigger than or equal to 10.');
        }

        $this->container['value_date'] = $value_date;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string $transaction_type 入払コード 半角数字 ・1=入金 ・2=出金
     *
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        if ((mb_strlen($transaction_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_type when calling Transaction., must be smaller than or equal to 1.');
        }
        if ((mb_strlen($transaction_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_type when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount 取引金額 半角数字　マイナス含む
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        if ((mb_strlen($amount) > 20)) {
            throw new \InvalidArgumentException('invalid length for $amount when calling Transaction., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $amount when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string $remarks 摘要内容 全半角文字 該当データがない場合は項目自体を設定しません
     *
     * @return $this
     */
    public function setRemarks($remarks)
    {
        if (!is_null($remarks) && (mb_strlen($remarks) > 255)) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling Transaction., must be smaller than or equal to 255.');
        }
        if (!is_null($remarks) && (mb_strlen($remarks) < 1)) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return string
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param string $balance 取引後残高 半角数字　マイナス含む
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        if ((mb_strlen($balance) > 20)) {
            throw new \InvalidArgumentException('invalid length for $balance when calling Transaction., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($balance) < 1)) {
            throw new \InvalidArgumentException('invalid length for $balance when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets item_key
     *
     * @return string
     */
    public function getItemKey()
    {
        return $this->container['item_key'];
    }

    /**
     * Sets item_key
     *
     * @param string $item_key 明細キー 半角数字 口座の科目が01=普通預金（有利息）または02=普通預金（決済用）の場合は口座ID毎に設定される明細キー（明細データtimestamp（μs）） 該当データがない場合または、つかいわけ口座の場合は項目自体を設定しません
     *
     * @return $this
     */
    public function setItemKey($item_key)
    {
        if (!is_null($item_key) && (mb_strlen($item_key) > 24)) {
            throw new \InvalidArgumentException('invalid length for $item_key when calling Transaction., must be smaller than or equal to 24.');
        }
        if (!is_null($item_key) && (mb_strlen($item_key) < 1)) {
            throw new \InvalidArgumentException('invalid length for $item_key when calling Transaction., must be bigger than or equal to 1.');
        }

        $this->container['item_key'] = $item_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


